{"version":3,"file":"calculate-points.test.js","sources":["js/data/game-data.js","js/game/calculate-points.js","js/game/calculate-points.test.js"],"sourcesContent":["export const GAME_SETTINGS = {\n  totalQuestions: 10,\n  totalTime: 300000, // 5 min in ms\n  fastAnswerTime: 30000, // 30 sec in ms\n  maxMistakes: 2,\n  losePoints: -1,\n  regularPoints: 1,\n  fastPoints: 2,\n  wrongPoints: -2\n};\n\nexport const GameStatus = {\n  TIMEUP: `timeup`,\n  LOSE: `lose`,\n  WIN: `win`,\n  CONTINUE: `continue`\n};\n\nexport const INITIAL_STATE = Object.freeze({\n  level: 0,\n  timeLeft: GAME_SETTINGS.totalTime,\n  mistakes: 0,\n  answers: []\n});\n","import {GAME_SETTINGS, GameStatus} from \"../data/game-data\";\n\nconst calculatePoints = (gameState, gameOutput) => {\n  if (gameOutput === GameStatus.TIMEUP || gameOutput === GameStatus.LOSE) {\n    return GAME_SETTINGS.losePoints;\n  }\n\n  return gameState.answers.reduce((points, answer) => {\n    if (answer.correct) {\n      points += (answer.time < GAME_SETTINGS.fastAnswerTime) ? GAME_SETTINGS.fastPoints : GAME_SETTINGS.regularPoints;\n    } else {\n      points += GAME_SETTINGS.wrongPoints;\n    }\n    return points;\n  }, 0);\n};\n\nexport default calculatePoints;\n","import {assert} from \"chai\";\nimport calculatePoints from \"./calculate-points\";\nimport {GameStatus} from \"../data/game-data\";\n\ndescribe(`Check points calculator`, () => {\n  it(`should return -1 if answered less than 10 answers`, () => {\n    assert.equal(calculatePoints({answers: [\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000}\n    ], mistakes: 0}, GameStatus.TIMEUP), -1);\n  });\n\n  it(`should return -1 if used all attempts`, () => {\n    assert.equal(calculatePoints({answers: [\n      {correct: true, time: 60000},\n      {correct: false, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: false, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: false, time: 60000},\n      {correct: true, time: 60000}\n    ], mistakes: 3}, GameStatus.LOSE), -1);\n    assert.equal(calculatePoints({answers: [\n      {correct: true, time: 10000},\n      {correct: true, time: 10000},\n      {correct: true, time: 10000},\n      {correct: true, time: 10000},\n      {correct: true, time: 10000},\n      {correct: true, time: 10000},\n      {correct: true, time: 10000},\n      {correct: false, time: 10000},\n      {correct: false, time: 10000},\n      {correct: false, time: 10000}\n    ], mistakes: 3}, GameStatus.LOSE), -1);\n  });\n\n  it(`should return 10 if all answers are correct and slow`, () => {\n    assert.equal(calculatePoints({answers: [\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000},\n      {correct: true, time: 60000}\n    ], mistakes: 0}, GameStatus.WIN), 10);\n  });\n\n  it(`should return 20 if all answers are correct and fast`, () => {\n    assert.equal(calculatePoints({answers: [\n      {correct: true, time: 20000},\n      {correct: true, time: 20000},\n      {correct: true, time: 20000},\n      {correct: true, time: 20000},\n      {correct: true, time: 20000},\n      {correct: true, time: 20000},\n      {correct: true, time: 20000},\n      {correct: true, time: 20000},\n      {correct: true, time: 20000},\n      {correct: true, time: 20000}\n    ], mistakes: 0}, GameStatus.WIN), 20);\n  });\n\n  it(`should return between 0 and 20`, () => {\n    assert.match(calculatePoints({answers: [\n      {correct: true, time: 10000},\n      {correct: false, time: 20000},\n      {correct: true, time: 30000},\n      {correct: false, time: 40000},\n      {correct: true, time: 50000},\n      {correct: true, time: 10000},\n      {correct: true, time: 20000},\n      {correct: true, time: 30000},\n      {correct: true, time: 40000},\n      {correct: true, time: 50000}\n    ], mistakes: 2}, GameStatus.WIN), /^([0-1]?[0-9]|20)$/);\n  });\n});\n"],"names":["assert"],"mappings":"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"}